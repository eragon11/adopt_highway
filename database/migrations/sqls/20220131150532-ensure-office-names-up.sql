/*
MAINTENANCE TABLE HAD A DEFAULT OF 1 FOR NEW DISTICTS
THIS CREATED EXTRA OFFICES IN THE WRONG DISTRICT
THIS UPDATED PROC WILL BACKUP THE LEGACY DATA, 
CREATE A NEW TABLE WITH A PROPER UNIQUE CONSTRAINT,
INSERT DATA FAVORING THE GIS FIRST, BUT ALSO ADD THE LEGACY OFFICES
DOES NOT HANDLE CONTACTS; THAT SHOULD BE HANDLED BY INTERNAL USER EPIC
*/

/*
AH-456 latest as of 2022-02-04 1033
1. Still have to resolve existing records being not good
Take a backup and restore
*/

-- take steps to drop constraints on existing MAINTENANCE_SECTION TABLE and its duplicated data
-- First, drop all indexes on our table
DECLARE @sql NVARCHAR(MAX);
SET @sql = N'';

DECLARE cur_sql CURSOR FOR
SELECT N'
  ALTER TABLE ' + QUOTENAME(s.name) + N'.'
  + QUOTENAME(t.name) + N' DROP CONSTRAINT '
  + QUOTENAME(c.name) + ';' as [SQL]
FROM sys.objects AS c
INNER JOIN sys.tables AS t
ON c.parent_object_id = t.[object_id]
INNER JOIN sys.schemas AS s 
ON t.[schema_id] = s.[schema_id]
WHERE c.[type] IN ('D','C','F','PK','UQ')
AND t.name IN ('MAINTENANCE_SECTION', 'MAINTENANCE_SECTION_LEGACY', 'COUNTY_MAINTENANCE_SECTION')
ORDER BY c.[type];
OPEN cur_sql 
FETCH NEXT FROM cur_sql INTO @sql;
WHILE @@FETCH_STATUS = 0 BEGIN;
	EXEC sys.sp_executesql @sql;
	FETCH NEXT FROM cur_sql INTO @sql;
END;
CLOSE cur_sql;
DEALLOCATE cur_sql;

IF OBJECT_ID('MAINTENANCE_SECTION') IS NOT NULL
BEGIN;
    EXEC sp_rename 'MAINTENANCE_SECTION', 'MAINTENANCE_SECTION_LEGACY';
END;

EXEC sp_executesql @stmt=N'
CREATE TABLE [MAINTENANCE_SECTION](
	[MAINTENANCE_SECTION_ID] [int] IDENTITY(1,1) NOT NULL PRIMARY KEY,
	[ORGANIZATION_ID] [int] NULL,
	[NAME] [varchar](50) NOT NULL,
	[NUMBER] [int] NOT NULL,
	[DISTRICT_ID] [int] NULL,
	[DISTRICT_NUMBER] [int] NOT NULL,
	CONSTRAINT [UQ_MAINTENANCE_SECTION] UNIQUE NONCLUSTERED 
	(
		[NUMBER] ASC,
		[DISTRICT_NUMBER] ASC
	)
);
';

EXEC sp_executesql @stmt=N'
CREATE OR ALTER
  PROCEDURE [aah].[aah_insert_missing_maintenance_sections] AS 
BEGIN;
	SET NOCOUNT ON;
	DECLARE @ms_name NVARCHAR(255),
		@ms_number NVARCHAR(255),
		@ms_district INT;
	DECLARE @maintenance_section TABLE (
			[ORGANIZATION_ID] [int] NULL,
			[NAME] [varchar](50) NOT NULL,
			[NUMBER] [int] NULL,
			[DISTRICT_ID] [int] NULL,
			[CREATE_DTTM] DATETIME2
		);
	INSERT INTO @maintenance_section (
			[DISTRICT_ID],
			[NUMBER],
			[NAME],
			[CREATE_DTTM]
		)
	SELECT DISTINCT 
		d.DISTRICT_ID, 
		COALESCE(t2.MNT_SEC_NBR, t1.MAINT_SECT_NBR), 
		COALESCE(t2.OFFICE_NM, t1.MAINT_SECT_NM), 
		COALESCE(CAST(t2.CREATE_DT as DATETIME2), CAST(t1.CREATE_DTTM AS DATETIME2))
	FROM aah_legacy..MAINT_SECT t1
	FULL OUTER JOIN gis.AAH_GIS_MAINTENANCE_SECTIONS t2 ON t1.DIST_ABRVN_NM = t2.DIST_ABRVN_NM AND t1.MAINT_SECT_NBR = t2.MNT_SEC_NBR
	LEFT JOIN DISTRICT D ON COALESCE(t2.DIST_ABRVN_NM, t1.DIST_ABRVN_NM) = d.CODE
	ORDER BY 1, 2;

	-- update any existing orgs
	UPDATE @maintenance_section
	SET ORGANIZATION_ID = t2.ORGANIZATION_ID
	FROM @maintenance_section t1
		INNER JOIN MAINTENANCE_SECTION t2 ON LTRIM(RTRIM(UPPER(t1.NAME))) = LTRIM(RTRIM(UPPER(t2.NAME)))
		AND t1.NUMBER = t2.NUMBER
		AND t1.DISTRICT_ID = t2.DISTRICT_ID;

	DECLARE ms_cursor CURSOR FOR
	SELECT [NAME],
		[NUMBER],
		[DISTRICT_ID]
	FROM @maintenance_section
	WHERE ORGANIZATION_ID IS NULL
	ORDER BY [NUMBER];
	OPEN ms_cursor FETCH NEXT
	FROM ms_cursor INTO @ms_name,
		@ms_number,
		@ms_district;
	WHILE @@FETCH_STATUS = 0 BEGIN;

	IF NOT EXISTS(SELECT * FROM @maintenance_section t1 
	INNER JOIN MAINTENANCE_SECTION t2 ON t1.DISTRICT_ID = t2.DISTRICT_ID AND t1.NUMBER = t2.NUMBER 
	INNER JOIN ORGANIZATION t3 ON t2.ORGANIZATION_ID = t3.ORGANIZATION_ID)
	BEGIN;
		INSERT INTO ORGANIZATION ([TYPE])
		VALUES (''Maintenance Section'');
	
		UPDATE @maintenance_section
		SET ORGANIZATION_ID = SCOPE_IDENTITY()
		WHERE [NAME] = @ms_name
			AND [NUMBER] = @ms_number
			AND [DISTRICT_ID] = @ms_district;
	END;

	FETCH NEXT
	FROM ms_cursor INTO @ms_name,
		@ms_number,
		@ms_district;
	END;
	CLOSE ms_cursor;
	DEALLOCATE ms_cursor;

	INSERT INTO [MAINTENANCE_SECTION] (
			[ORGANIZATION_ID],
			[NAME],
			[NUMBER],
			[DISTRICT_ID],
	      [DISTRICT_NUMBER]
		)
	SELECT ms.[ORGANIZATION_ID],
		ms.[NAME],
		ms.[NUMBER],
		ms.[DISTRICT_ID],
		d.NUMBER
	FROM @maintenance_section ms
		INNER JOIN DISTRICT d ON ms.DISTRICT_ID = d.DISTRICT_ID
		LEFT JOIN MAINTENANCE_SECTION t1 ON ms.[NUMBER] = t1.[NUMBER]
		AND ms.[NAME] = t1.[name]
		AND ms.DISTRICT_ID = t1.DISTRICT_ID
	WHERE t1.[NUMBER] IS NULL;
	SET NOCOUNT OFF;
END;

';

-- Put our maintenance sections back in
EXEC aah_insert_missing_maintenance_sections;

-- update to use the new organization IDs
UPDATE t2 
SET ORGANIZATION_ID = t5.ORGANIZATION_ID 
FROM USER_PERSON t1
INNER JOIN ROLE t2 ON t1.USER_ID = t2.USER_ID
INNER JOIN ORGANIZATION t3 ON t2.ORGANIZATION_ID = t3.ORGANIZATION_ID
INNER JOIN MAINTENANCE_SECTION_LEGACY t4 ON t3.ORGANIZATION_ID = t4.ORGANIZATION_ID
INNER JOIN MAINTENANCE_SECTION t5 ON t4.DISTRICT_NUMBER = t5.DISTRICT_NUMBER AND t4.NUMBER = t5.NUMBER

IF OBJECT_ID('MAINTENANCE_SECTION_LEGACY') IS NOT NULL
BEGIN;
    EXEC sp_executesql @stmt=N'DROP TABLE [MAINTENANCE_SECTION_LEGACY]';
END;
