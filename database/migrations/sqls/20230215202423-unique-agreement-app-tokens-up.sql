IF OBJECT_ID('[FK_DOCUMENT_AGREEMENT]') IS NOT NULL 
BEGIN
    ALTER TABLE DOCUMENT DROP CONSTRAINT FK_DOCUMENT_AGREEMENT;
END

-- rename the current agreements table to backup
IF OBJECT_ID('aah.AGREEMENT') IS NOT NULL AND OBJECT_ID('aah.AGREEMENT_BACKUP_20230221') IS NULL
BEGIN
    PRINT 'Moving AGREEMENT to AGREEMENT_BACKUP_20230221';
    EXEC sp_rename 'AGREEMENT', 'AGREEMENT_BACKUP_20230221';
END

CREATE TABLE [AGREEMENT]
(
    [AGREEMENT_ID] [int] IDENTITY(1,1) NOT NULL,
    [GROUP_ID] [int] NOT NULL,
    [SEGMENT_ID] [nvarchar](500) NULL,
    [STATUS] [nvarchar](20) NULL,
    [BEGIN_DATE] [datetime2](7) NULL,
    [END_DATE] [datetime2](7) NULL,
    [COMMENT] [nvarchar](500) NULL,
    [AAH_SEGMENT_GLOBAL_ID] [uniqueidentifier] NULL,
    [APPLICATION_TOKEN] [uniqueidentifier] NOT NULL,
    PRIMARY KEY NONCLUSTERED 
(
	[AGREEMENT_ID] ASC
)
);

CREATE UNIQUE INDEX [UIDX_AGREEMENT] ON [AGREEMENT] ([APPLICATION_TOKEN]);
SET IDENTITY_INSERT AGREEMENT ON;
EXEC sp_executesql @stmt=N'INSERT INTO AGREEMENT([AGREEMENT_ID]
      ,[GROUP_ID]
      ,[SEGMENT_ID]
      ,[STATUS]
      ,[BEGIN_DATE]
      ,[END_DATE]
      ,[COMMENT]
      ,[AAH_SEGMENT_GLOBAL_ID]
      ,[APPLICATION_TOKEN])
SELECT [AGREEMENT_ID]
      ,[GROUP_ID]
      ,[SEGMENT_ID]
      ,[STATUS]
      ,[BEGIN_DATE]
      ,[END_DATE]
      ,[COMMENT]
      ,[AAH_SEGMENT_GLOBAL_ID]
      ,COALESCE([APPLICATION_TOKEN], NEWID())
  FROM AGREEMENT_BACKUP_20230221;';
  SET IDENTITY_INSERT AGREEMENT OFF;

  -- add foreign key to AGREEMENT
IF OBJECT_ID('[FK_DOCUMENT_AGREEMENT]') IS NULL 
BEGIN;
    ALTER TABLE [DOCUMENT]  WITH CHECK ADD  CONSTRAINT [FK_DOCUMENT_AGREEMENT] FOREIGN KEY([AGREEMENT_ID])
    REFERENCES [AGREEMENT] ([AGREEMENT_ID]);
END;